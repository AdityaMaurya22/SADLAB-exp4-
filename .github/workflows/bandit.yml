import subprocess
import pickle
import os

def insecure_os_system(command):
    # Vulnerability: Using os.system with unsanitized input (command injection)
    os.system(command)

def insecure_subprocess_popen(command):
    # Vulnerability: Using subprocess.Popen with shell=True and unsanitized input
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
    output, _ = process.communicate()
    print(output.decode())

def insecure_pickle_load(data):
    # Vulnerability: Unsafe deserialization of untrusted data
    obj = pickle.loads(data)
    print("Deserialized:", obj)

def hardcoded_password():
    # Vulnerability: Hardcoded password in code
    password = "P@ssw0rd123"
    print(f"Using password: {password}")

def use_eval(user_input):
    # Vulnerability: Using eval on untrusted input (code injection)
    result = eval(user_input)
    print(f"Eval result: {result}")

def main():
    # Example commands (unsafe usage)
    insecure_os_system("ls -la")
    insecure_subprocess_popen("echo Bandit Test")
    
    # Example unsafe pickle data (simulate malicious input)
    malicious_data = b"cos\nsystem\n(S'echo Bandit vulnerable!'\ntR."
    insecure_pickle_load(malicious_data)

    hardcoded_password()
    
    user_input = "2 + 2"
    use_eval(user_input)

if __name__ == "__main__":
    main()
